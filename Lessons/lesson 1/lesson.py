# -*- coding: utf-8 -*-
"""Lesson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fl5G_HT_h2WO8Gp5dpR_hfODUiiSVAlt
"""

import pandas as pd
import plotly.express as px
from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing

data = pd.read_csv("https://github.com/dustywhite7/Econ8310/raw/master/DataSets/RecessionForecasting.csv")
data['DATE'] = pd.to_datetime(data['DATE'])

px.line(data, x="DATE", y='CivEmpLevel')

employment = data['CivEmpLevel']
employment.index = data['DATE']
employment.index.freq = employment.index.inferred_freq

alpha020 = SimpleExpSmoothing(employment).fit(
                                        smoothing_level=0.2,
                                        optimized=False)

alpha050 = SimpleExpSmoothing(employment).fit(
                                        smoothing_level=0.5,
                                        optimized=False)

alpha080 = SimpleExpSmoothing(employment).fit(
                                        smoothing_level=0.8,
                                        optimized=False)

forecast020 = alpha020.forecast(3)
forecast050 = alpha050.forecast(3)
forecast080 = alpha080.forecast(3)

import plotly.graph_objects as go

# Plotting our data

smoothData = pd.DataFrame([employment.values, alpha020.fittedvalues.values,  alpha050.fittedvalues.values,  alpha080.fittedvalues.values]).T
smoothData.columns = ['Truth', 'alpha=0.2', 'alpha=0.5', 'alpha=0.8']
smoothData.index = employment.index

fig = px.line(smoothData, y = ['Truth', 'alpha=0.2', 'alpha=0.5', 'alpha=0.8'],
        x = smoothData.index,
        color_discrete_map={"Truth": 'blue',
                           'alpha=0.2': 'red',
                            'alpha=0.5':'green',
                            'alpha=0.8':'purple'}
       )

fig.update_xaxes(range=[smoothData.index[-50], forecast020.index[-1]])
fig.update_yaxes(range=[142000, 153000])


# Incorporating the Forecasts

fig.add_trace(go.Scatter(x=forecast020.index, y = forecast020.values, name='Forecast alpha=0.2', line={'color':'red'}))
fig.add_trace(go.Scatter(x=forecast050.index, y = forecast050.values, name='Forecast alpha=0.5', line={'color':'green'}))
fig.add_trace(go.Scatter(x=forecast080.index, y = forecast080.values, name='Forecast alpha=0.8', line={'color':'purple'}))

# Streamlined Modeling

alphaBest = SimpleExpSmoothing(employment).fit()
forecast = alphaBest.forecast(3)

import plotly.graph_objects as go

# Plotting our data

smoothData = pd.DataFrame([employment.values, alphaBest.fittedvalues.values]).T
smoothData.columns = ['Truth', 'Best Fit Model']
smoothData.index = employment.index

fig = px.line(smoothData, y = ['Truth', 'Best Fit Model'],
        x = smoothData.index,
        color_discrete_map={"Truth": 'blue',
                           'Best Fit Model': 'red'}
       )

fig.update_xaxes(range=[smoothData.index[-50], forecast.index[-1]])
fig.update_yaxes(range=[142000, 153000])


# Incorporating the Forecasts

fig.add_trace(go.Scatter(x=forecast.index, y = forecast.values, name='Forecast', line={'color':'red'}))

# Linear trend
trend = ExponentialSmoothing(employment, trend='add').fit()
# Linear trend with damping
dampedTrend = ExponentialSmoothing(employment, trend='add', damped=True, use_boxcox=True).fit(use_brute=True)

forecast_t = trend.forecast(10)
forecast_dt = dampedTrend.forecast(10)

import plotly.graph_objects as go

# Plotting our data

smoothData = pd.DataFrame([employment.values, trend.fittedvalues.values, dampedTrend.fittedvalues.values]).T
smoothData.columns = ['Truth', 'Trend', 'Damped Trend']
smoothData.index = employment.index

fig = px.line(smoothData, y = ['Truth', 'Trend', 'Damped Trend'],
        x = smoothData.index,
        color_discrete_map={"Truth": 'blue',
                           'Trend': 'red',
                            'Damped Trend': 'green'
                           },
              title='Linear and Damped Trends'
       )

fig.update_xaxes(range=[smoothData.index[-50], forecast_t.index[-1]])
fig.update_yaxes(range=[142000, 154000])


# Incorporating the Forecasts

fig.add_trace(go.Scatter(x=forecast_t.index, y = forecast_t.values, name='Forecast Trend', line={'color':'red'}))
fig.add_trace(go.Scatter(x=forecast_dt.index, y = forecast_dt.values, name='Forecast Damped Trend', line={'color':'green'}))

# Linear trend
trend = ExponentialSmoothing(employment, trend='add', seasonal='add').fit()
# Linear trend with damping
dampedTrend = ExponentialSmoothing(employment, trend='mul', seasonal='add', damped=True, use_boxcox=True).fit(use_brute=True)

forecast_t = trend.forecast(10)
forecast_dt = dampedTrend.forecast(10)

import plotly.graph_objects as go

# Plotting our data

smoothData = pd.DataFrame([employment.values, trend.fittedvalues.values, dampedTrend.fittedvalues.values]).T
smoothData.columns = ['Truth', 'Trend', 'Damped Trend']
smoothData.index = employment.index

fig = px.line(smoothData, y = ['Truth', 'Trend', 'Damped Trend'],
        x = smoothData.index,
        color_discrete_map={"Truth": 'blue',
                           'Trend': 'red',
                            'Damped Trend': 'green'
                           },
              title='With Seasonality'
       )

fig.update_xaxes(range=[smoothData.index[-50], forecast_t.index[-1]])
fig.update_yaxes(range=[142000, 157000])


# Incorporating the Forecasts

fig.add_trace(go.Scatter(x=forecast_t.index, y = forecast_t.values, name='Forecast Trend', line={'color':'red'}))
fig.add_trace(go.Scatter(x=forecast_dt.index, y = forecast_dt.values, name='Forecast Damped Trend', line={'color':'green'}))

# Linear trend
trend = ExponentialSmoothing(employment, trend='add', seasonal='add').fit()
# Linear trend with damping
dampedTrend = ExponentialSmoothing(employment, trend='mul', seasonal='add', damped=True).fit(use_brute=True)

forecast_t = trend.forecast(10)
forecast_dt = dampedTrend.forecast(10)

import plotly.graph_objects as go

# Plotting our data

smoothData = pd.DataFrame([employment.values, trend.fittedvalues.values, dampedTrend.fittedvalues.values]).T
smoothData.columns = ['Truth', 'Trend', 'Damped Trend']
smoothData.index = employment.index

fig = px.line(smoothData, y = ['Truth', 'Trend', 'Damped Trend'],
        x = smoothData.index,
        color_discrete_map={"Truth": 'blue',
                           'Trend': 'red',
                            'Damped Trend': 'green'
                           },
              title='With Seasonality'
       )

fig.update_xaxes(range=[smoothData.index[-50], forecast_t.index[-1]])
fig.update_yaxes(range=[142000, 157000])


# Incorporating the Forecasts

fig.add_trace(go.Scatter(x=forecast_t.index, y = forecast_t.values, name='Forecast Trend', line={'color':'red'}))
fig.add_trace(go.Scatter(x=forecast_dt.index, y = forecast_dt.values, name='Forecast Damped Trend', line={'color':'green'}))